////////////////
// QUESTION 2
////////////////

The call to Set<Coord>::insert causes an error because the comparison operators "==" and "<" used in the program that are supposed to compare "p->m_value" to "value" do not compile for the Coord class. C++ offers a default comparison operator that only correctly compares primitive types; to use comparison operators for classes such as Coord, the writer of the program must manually override the default comparison operator.

////////////////
// QUESTION 3B
////////////////

We cannot solve the problem if we only had a one parameter listAll() function because it is impossible to tack on new paths to the previous string without having a separate string parameter to hold that value. Every time we call the function, the old values disappear; you would only be dealing with a vector that starts at the 1st position of the old vector. Thus we could not print out the full path for each item. 

////////////////
// QUESTION 4A
////////////////

ANS: O(N^3)
The time complexity of this algorithm is O(N^3). We consider the worst case scenario for the most time-consuming action. The outer for loop runs at most N times; within the outer for loop, the middle for loop runs at most N times. The innermost loop also runs at most N times; thus the complexity is N*N*N which is O(N^3).

////////////////
// QUESTION 4B 
////////////////

ANS: O(N^3)
The time complexity of this algorithm is still O(N^3). If we are looking at the worst case scenario of the situation, the outer loop will still run N times at most, the middle loop will increase its iterations until it runs N iterations, and the inside loop will still run N times. The complexity is thus (N*(0 + 1 + 2 ... N)*N); since we only look at the largest term, we find that the complexity is still N*N*N.

////////////////
// QUESTION 5A
////////////////

ANS: O(N^3)
Since the first few "if" statements are just checks, we can skip past those to focus on the most time-consuming operation that occurs within the bottom for loop. Within the bottom for loop, there are two statements that are non-constant, the ones that deal with get() and insert(). The get() function simply has time complexity O(N) because the location is specified, so no searching through a list is involved. The insert function requires that we find the value and then insert it. For insertion, the time complexity is O(N^2) because the first time we insert, we require N time complexity and steadily increase until we reach 2N. Thus the complexity reduces to N*N. Multiply this by the outer loop and we have O(N^3).

////////////////
// QUESTION 5B
////////////////

ANS: O(NlogN)
We first copy all items into v, which takes only takes O(1) time for each Set. Then, we sort the vector which brings the time complexity to NlogN (since NlogN is significantly more time-consuming than the vector insertion). Erasing nodes also only takes O(1) time, so we ignore that. Finally, we copy items from v into result; the for loop will run for a maximum of N times if all items are unique. Thus the complexity is NlogN + N, but we throw away the least significant item. Thus the complexity is O(NlogN).

////////////////
// QUESTION 5C
////////////////

ANS: O(N)
Since the while loop contains the most time-consuming operations, we can skip past the first if/else statements. The maximum times the while loop will run is 2N times because in the worst case scenario, both p1 and p2 will get incremented to their maximum, which is N times each. The function insertBefore only has complexity O(1) because the index is already given. Thus, the total time complexity of the algorithm reduces down to O(N).